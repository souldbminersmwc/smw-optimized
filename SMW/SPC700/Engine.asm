
!SFX_Jump = #$01
!SFX_YoshiDrumOn = #$02
!SFX_YoshiDrumOff = #$03
!SFX_Grinder = #$04
!SFX_Special = #$FF

!SFX_Pause = #$11
!SFX_Unpause = #$12

%SPCDataBlockStart(!ARAM_SMW_EngineLoc)
SPC700_Engine:
	CLRP
	MOV X,#$CF
	MOV SP,X
	MOV A,#$00
	MOV !ARAM_SMW_PlayerOnYoshi,A
	MOV !ARAM_SMW_TempoIncrease,A
	MOV !ARAM_SMW_PauseMusic,A
	MOV !ARAM_SMW_0389,A
	MOV X,A
CODE_0513:
	MOV (X+),A
	CMP X,#$E8
	BNE CODE_0513
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	MOV A,$04FF
	CMP A,#$5A
	BNE CODE_0517
	MOV A,$04FE
	CMP A,#$A5
	BEQ CODE_0527
endif
CODE_0517:
	MOV A,#$00
	MOV X,A
CODE_051B:
	MOV $0200+X,A
	INC X
	BNE CODE_051B
CODE_0521:
	MOV $0300+X,A
	INC X
	BNE CODE_0521
CODE_0527:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	MOV A,#$5A
	MOV $04FF,A
	MOV A,#$A5
	MOV $04FE,A
endif
	MOV X,#$0B
CODE_0529:
	MOV A,DATA_DefDSPRegs+X
	MOV Y,A
	MOV A,DATA_DefDSPValues+X
	CALL SUB_DSPWrite
	DEC X
	BPL CODE_0529
	MOV A,#$F0
	MOV !REGISTER_SPC700_ControlRegister,A
	MOV A,#$10
	MOV !REGISTER_SPC700_Timer0,A
	MOV A,#$36
	MOV !ARAM_SMW_TempoHi,A
	MOV A,#$01
	MOV !REGISTER_SPC700_ControlRegister,A
CODE_0549:
	MOV Y,$00FD
	BEQ CODE_0549
	PUSH Y
	MOV A,#$38
	MUL YA
	CLRC
	ADC A,!ARAM_SMW_MainTimer
	MOV !ARAM_SMW_MainTimer,A
	BCC CODE_0573
	INC !ARAM_SMW_TickCounter
	CALL CODE_06AE
	MOV X,#$00
	CALL CODE_05A5
	CALL SUB_APUPort1Input
	MOV X,#$01
	CALL CODE_05A5
	CALL CODE_0816
	MOV X,#$03
	CALL CODE_05A5
CODE_0573:
	MOV A,!ARAM_SMW_TempoHi
	POP Y
	MUL YA
	CLRC
	ADC A,!ARAM_SMW_TempoAdder
	MOV !ARAM_SMW_TempoAdder,A
	BCC CODE_058D
	MOV A,!ARAM_SMW_PauseMusic
	BNE CODE_0586
	CALL CODE_0BC0
CODE_0586:
	MOV X,#$02
	CALL CODE_05A5
	BRA CODE_0549

CODE_058D:
	MOV A,$06
	BEQ CODE_0549
	MOV X,#$0E
	MOV !ARAM_SMW_CurrentChannelBit,#$80
CODE_0596:
	MOV A,$31+X
	BEQ CODE_059D
	CALL CODE_1198
CODE_059D:
	LSR !ARAM_SMW_CurrentChannelBit
	DEC X
	DEC X
	BPL CODE_0596
	BRA CODE_0549

CODE_05A5:
	MOV A,X
	MOV Y,A
	MOV A,$04+X
	MOV !REGISTER_SPC700_APUPort0+X,A
CODE_05AC:
	MOV A,!REGISTER_SPC700_APUPort0+X
	CMP A,!REGISTER_SPC700_APUPort0+X
	BNE CODE_05AC
	MOV Y,A
	MOV A,$08+X
	MOV $08+X,Y
	CBNE $08+X,CODE_05C1
	MOV Y,#$00
	MOV $00+X,Y
	RET

CODE_05C1:
	MOV $00+X,Y
	MOV A,Y
	RET

CODE_05C5:
	CMP A,#$D0
	BCS CODE_05CE
	CMP A,#$C6
	BCC CODE_05E3
CODE_05CD:
	RET

CODE_05CE:
	MOV !ARAM_SMW_Instrument+X,A
	SETC
	SBC A,#$D0
	MOV Y,#$06
	MOV !ARAM_SMW_UploadDestinationLo,#PercussionTable
	MOV !ARAM_SMW_UploadDestinationHi,#PercussionTable>>8
	CALL CODE_0D56
	BNE CODE_05CD
	INC Y
	MOV A,(!ARAM_SMW_UploadDestinationLo)+Y
CODE_05E3:
	AND A,#$7F
	CLRC
	ADC A,!ARAM_SMW_GlobalTranspose
	MOV !ARAM_SMW_NoteValue+X,A
	MOV A,!ARAM_SMW_Tuning+X
	MOV !ARAM_SMW_Portamento+X,A
	MOV A,#$00
	MOV $0330+X,A
	MOV $0360+X,A
	MOV $A0+X,A
	MOV $0110+X,A
	MOV $B0+X,A
	OR (!ARAM_SMW_UpdateVolume),(!ARAM_SMW_CurrentChannelBit)
	OR ($47),(!ARAM_SMW_CurrentChannelBit)
	MOV A,$0300+X
	MOV $90+X,A
	BEQ CODE_062B
	MOV A,$0301+X
	MOV $91+X,A
	MOV A,$0320+X
	BNE CODE_0621
	MOV A,!ARAM_SMW_NoteValue+X
	SETC
	SBC A,$0321+X
	MOV !ARAM_SMW_NoteValue+X,A
CODE_0621:
	MOV A,$0321+X
	CLRC
	ADC A,!ARAM_SMW_NoteValue+X
	CALL CODE_0F5D
CODE_062B:
	MOV A,!ARAM_SMW_NoteValue+X
	MOV Y,A
	MOV A,!ARAM_SMW_Portamento+X
	MOVW $10,YA
CODE_0634:
	MOV Y,#$00
	MOV A,$11
	SETC
	SBC A,#$34
	BCS CODE_0646
	MOV A,$11
	SETC
	SBC A,#$13
	BCS CODE_064A
	DEC Y
	ASL A
CODE_0646:
	ADDW YA,$10
	MOVW $10,YA
CODE_064A:
	PUSH X
	MOV A,$11
	CALL CODE_12BD
	MOVW !ARAM_SMW_UploadDestinationLo,YA
	MOV A,$11
	INC A
	CALL CODE_12BD
	POP X
	SUBW YA,!ARAM_SMW_UploadDestinationLo
	PUSH A
	MOV A,$10
	MUL YA
	ADDW YA,!ARAM_SMW_UploadDestinationLo
	MOVW !ARAM_SMW_UploadDestinationLo,YA
	MOV A,$10
	POP Y
	MUL YA
	MOV A,Y
	MOV Y,#$00
	ADDW YA,!ARAM_SMW_UploadDestinationLo
	MOVW !ARAM_SMW_UploadDestinationLo,YA
	MOV A,$0210+X
	MOV Y,!ARAM_SMW_UploadDestinationLo
	MUL YA
	MOVW !ARAM_SMW_NotePitchLo,YA
	MOV A,$0210+X
	MOV Y,!ARAM_SMW_UploadDestinationHi
	MUL YA
	CLRC
	ADC A,!ARAM_SMW_NotePitchHi
	MOV !ARAM_SMW_NotePitchHi,A
	MOV A,X
	XCN A
	LSR A
	OR A,#$02
	MOV Y,A
	MOV A,!ARAM_SMW_NotePitchLo
	CALL CODE_068F
	INC Y
	MOV A,!ARAM_SMW_NotePitchHi
CODE_068F:
	PUSH A
	MOV A,!ARAM_SMW_CurrentChannelBit
	AND A,!ARAM_SMW_MuteChannelBit
	POP A
	BNE CODE_069D
SUB_DSPWrite:
	MOV !REGISTER_SPC700_DSPRegisterIndex,Y
	MOV !REGISTER_SPC700_ReadWriteToDSPRegister,A
CODE_069D:
	RET

CODE_069E:
	MOV A,#$0A
	MOV !ARAM_SMW_TempoIncrease,A
	MOV A,!ARAM_SMW_TempoHi
	CALL CODE_0E14
	MOV A,#$1D
	MOV $03,A
	BRA CODE_06D2

CODE_06AE:
	CMP $00,!SFX_Unpause
	BEQ CODE_06C2
	CMP $00,!SFX_Pause
	BEQ CODE_06C2
	CMP $04,!SFX_Pause
	BEQ CODE_06C8
	CMP $04,#$1D
	BEQ CODE_06C8
CODE_06C2:
	MOV A,$00
	BMI CODE_069E
	BNE CODE_06D2
CODE_06C8:
	MOV A,$0382
	BNE CODE_071A
	MOV A,$04
	BNE CODE_074D
CODE_06D1:
	RET

CODE_06D2:
	MOV $04,A
	MOV A,!ARAM_SMW_PauseMusic
	BEQ CODE_06F7
	MOV A,#$00
	MOV !ARAM_SMW_PauseMusic,A
	MOV A,!ARAM_SMW_0389
	BNE CODE_06E7
	MOV A,#$20
	BRA CODE_06F2

CODE_06E7:
	MOV A,#$16
	MOV $62,A
	MOV $64,A
	CALL CODE_0EEB
	MOV A,#$00
CODE_06F2:
	MOV Y,#$6C
	CALL SUB_DSPWrite
CODE_06F7:
	MOV A,#$02
	MOV $0382,A
	CMP $04,!SFX_Pause
	BNE CODE_070B
	MOV A,!ARAM_SMW_0389
	BEQ CODE_070B
	MOV A,#$00
	CALL CODE_0F22
CODE_070B:
	MOV A,#$10
	MOV Y,#$5C
	CALL SUB_DSPWrite
	SET4 !ARAM_SMW_MuteChannelBit
	MOV A,#$00
	MOV $0308,A
	RET

CODE_071A:
	DEC $0382
	BNE CODE_06D1
CODE_071F:
	MOV A,$04
	ASL A
	MOV Y,A
	MOV A,SFXTable1-2+Y
	MOV $18,A
	MOV A,SFXTable1-1+Y
	MOV $19,A
	BRA CODE_0754

CODE_072F:
	CMP $04,!SFX_Pause
	BNE CODE_073E
	MOV A,#$60
	MOV !ARAM_SMW_PauseMusic,A
	MOV Y,#$6C
	CALL SUB_DSPWrite
CODE_073E:
	MOV $04,#$00
	CLR4 !ARAM_SMW_MuteChannelBit
	MOV X,#$08
	MOV A,$C9
	BEQ CODE_074C
	JMP CODE_0D4B

CODE_074C:
	RET

CODE_074D:
	DEC !ARAM_SMW_RunningRemoteCode
	BNE CODE_07A6
CODE_0752:
	INCW $18
CODE_0754:
	MOV X,#$00
	MOV A,($18+X)
	BEQ CODE_072F
	BMI CODE_0786
	MOV $0381,A
	INCW $18
	MOV A,($18+X)
	MOV $10,A
	BMI CODE_0786
	MOV Y,#$40
	CALL SUB_DSPWrite
	INCW $18
	MOV A,($18+X)
	BPL CODE_077D
	MOV X,A
	MOV A,$10
	MOV Y,#$41
	CALL SUB_DSPWrite
	MOV A,X
	BRA CODE_0786

CODE_077D:
	MOV Y,#$41
	CALL SUB_DSPWrite
	INCW $18
	MOV A,($18+X)
CODE_0786:
	CMP A,#$DA
	BEQ CODE_07F3
	CMP A,#$DD
	BEQ CODE_07C2
	CMP A,#$EB
	BEQ CODE_07D5
	CMP A,#$FF
	BEQ CODE_071F
	MOV X,#$08
	CALL CODE_05C5
	MOV A,#$10
	CALL CODE_0D32
CODE_07A0:
	MOV A,$0381
	MOV !ARAM_SMW_RunningRemoteCode,A
CODE_07A6:
	CLR7 $13
	MOV X,#$08
	MOV A,$90+X
	BEQ CODE_07B3
	CALL CODE_09CD
	BRA CODE_07C1

CODE_07B3:
	MOV A,#$02
	CMP A,!ARAM_SMW_RunningRemoteCode
	BNE CODE_07C1
	MOV A,#$10
	MOV Y,#$5C
	CALL SUB_DSPWrite
CODE_07C1:
	RET

CODE_07C2:
	MOV X,#$00
	INCW $18
	MOV A,($18+X)
	MOV !ARAM_SMW_CurrentChannel,#$08
	MOV X,#$08
	CALL CODE_05C5
	MOV A,#$10
	CALL CODE_0D32
CODE_07D5:
	MOV X,#$00
	INCW $18
	MOV A,($18+X)
	MOV $99,A
	INCW $18
	MOV A,($18+X)
	MOV $98,A
	PUSH A
	INCW $18
	MOV A,($18+X)
	POP Y
	MOV !ARAM_SMW_CurrentChannel,#$08
	MOV X,#$08
	CALL CODE_0F5D
	BRA CODE_07A0

CODE_07F3:
	MOV X,#$00
	INCW $18
	MOV A,($18+X)
	MOV Y,#$09
	MUL YA
	MOV X,A
	MOV Y,#$40
	MOV $12,#$08
CODE_0802:
	MOV A,SFXInstrumentTable+X
	CALL SUB_DSPWrite
	INC X
	INC Y
	DBNZ $12,CODE_0802
	MOV A,SFXInstrumentTable+X
	MOV $0218,A
	JMP CODE_0752

CODE_0816:
	CMP $07,#$24
	BEQ CODE_082E
	CMP $03,#$24
	BEQ CODE_082A
	CMP $07,#$1D
	BEQ CODE_082E
	CMP $07,#$05
	BEQ CODE_082E
CODE_082A:
	MOV A,$03
	BNE CODE_0837
CODE_082E:
	MOV A,$0D
	BNE CODE_084B
	MOV A,$07
	BNE CODE_0876
CODE_0836:
	RET

CODE_0837:
	MOV $07,A
	MOV $0D,#$02
	MOV A,#$40
	MOV Y,#$5C
	CALL SUB_DSPWrite
	SET6 !ARAM_SMW_MuteChannelBit
	MOV A,#$00
	MOV $030C,A
	RET

CODE_084B:
	DBNZ $0D,CODE_0836
	MOV A,$07
	ASL A
	MOV Y,A
	MOV A,SFXTable0-2+Y
	MOV $1A,A
	MOV A,SFXTable0-1+Y
	MOV $1B,A
	BRA CODE_087D

CODE_085E:
	MOV $07,#$00
	CLR6 !ARAM_SMW_MuteChannelBit
	MOV A,#$00
	MOV $2F,A
	MOV Y,#$3D
	CALL SUB_DSPWrite
	MOV X,#$0C
	MOV A,$CD
	BEQ CODE_0875
	JMP CODE_0D4B

CODE_0875:
	RET

CODE_0876:
	DEC $0384
	BNE CODE_08D3
CODE_087B:
	INCW $1A
CODE_087D:
	MOV X,#$00
	MOV A,($1A+X)
	BEQ CODE_085E
	BMI CODE_08AF
	MOV $0385,A
	INCW $1A
	MOV A,($1A+X)
	MOV $10,A
	BMI CODE_08AF
	MOV Y,#$60
	CALL SUB_DSPWrite
	INCW $1A
	MOV A,($1A+X)
	BPL CODE_08A6
	MOV X,A
	MOV A,$10
	MOV Y,#$61
	CALL SUB_DSPWrite
	MOV A,X
	BRA CODE_08AF

CODE_08A6:
	MOV Y,#$61
	CALL SUB_DSPWrite
	INCW $1A
	MOV A,($1A+X)
CODE_08AF:
	CMP A,#$DA
	BEQ CODE_0920
	CMP A,#$DD
	BEQ CODE_08EF
	CMP A,#$EB
	BEQ CODE_0902
	CMP A,#$FF
	BNE CODE_08C3
	DECW $1A
	BRA CODE_087D

CODE_08C3:
	MOV X,#$0C
	CALL CODE_05C5
	MOV A,#$40
	CALL CODE_0D32
CODE_08CD:
	MOV A,$0385
	MOV $0384,A
CODE_08D3:
	CLR7 $13
	MOV X,#$0C
	MOV A,$90+X
	BEQ CODE_08E0
	CALL CODE_09CD
	BRA CODE_08EE

CODE_08E0:
	MOV A,#$02
	CMP A,$0384
	BNE CODE_08EE
	MOV A,#$40
	MOV Y,#$5C
	CALL SUB_DSPWrite
CODE_08EE:
	RET

CODE_08EF:
	MOV X,#$00
	INCW $1A
	MOV A,($1A+X)
	MOV !ARAM_SMW_CurrentChannel,#$0C
	MOV X,#$0C
	CALL CODE_05C5
	MOV A,#$40
	CALL CODE_0D32
CODE_0902:
	MOV X,#$00
	INCW $1A
	MOV A,($1A+X)
	MOV $9D,A
	INCW $1A
	MOV A,($1A+X)
	MOV $9C,A
	PUSH A
	INCW $1A
	MOV A,($1A+X)
	POP Y
	MOV !ARAM_SMW_CurrentChannel,#$0C
	MOV X,#$0C
	CALL CODE_0F5D
	BRA CODE_08CD

CODE_0920:
	MOV A,#$00
	MOV $2F,A
	MOV Y,#$3D
	CALL SUB_DSPWrite
CODE_0929:
	MOV X,#$00
	INCW $1A
	MOV A,($1A+X)
	BMI CODE_094E
	MOV Y,#$09
	MUL YA
	MOV X,A
	MOV Y,#$60
	MOV $12,#$08
CODE_093A:
	MOV A,SFXInstrumentTable+X
	CALL SUB_DSPWrite
	INC X
	INC Y
	DBNZ $12,CODE_093A
	MOV A,SFXInstrumentTable+X
	MOV $021C,A
	JMP CODE_087B

CODE_094E:
	AND A,#$1F
	MOV $2E,A
	MOV Y,#$6C
	CALL SUB_DSPWrite
	MOV A,#$40
	MOV $2F,A
	MOV Y,#$3D
	CALL SUB_DSPWrite
	BRA CODE_0929

CODE_0962:
	MOV Y,#$09
	MUL YA
	MOV X,A
	MOV Y,#$50
	MOV $12,#$08
CODE_096B:
	MOV A,SFXInstrumentTable+X
	CALL SUB_DSPWrite
	INC X
	INC Y
	DBNZ $12,CODE_096B
	MOV A,SFXInstrumentTable+X
	MOV $021A,A
	RET

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
CODE_099C:
	MOV A,#$60
	MOV Y,#$6C
	CALL SUB_DSPWrite
	MOV A,#$FF
	MOV Y,#$5C
	CALL SUB_DSPWrite
	CALL $FE00
	MOV A,#$00
	MOV $04,A
	MOV $05,A
	MOV $06,A
	MOV $07,A
	MOV !ARAM_SMW_MuteChannelBit,A
	MOV !ARAM_SMW_TempoIncrease,A
	MOV !ARAM_SMW_PauseMusic,A
	MOV !ARAM_SMW_PlayerOnYoshi,A
	MOV !ARAM_SMW_0389,A
	MOV A,#$20
	MOV Y,#$6C
	CALL SUB_DSPWrite
	RET
endif
CODE_097D:
	MOV A,$06
	CMP A,#$06
	BEQ CODE_0987
	AND A,#$FC
	BNE CODE_0A03
CODE_0987:
	MOV A,!ARAM_SMW_PlayerOnYoshi
	BNE CODE_099A
	MOV A,#$09
	CALL CODE_0962
	MOV A,#$01
	BNE CODE_0997
CODE_0995:
	MOV A,#$00
CODE_0997:
	MOV !ARAM_SMW_PlayerOnYoshi,A
CODE_099A:
	BRA CODE_0A03

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) == $00
CODE_099C:
	MOV A,#$60
	MOV Y,#$6C
	CALL SUB_DSPWrite
	MOV A,#$FF
	MOV Y,#$5C
	CALL SUB_DSPWrite
	CALL CODE_12F2
	MOV A,#$00
	MOV $04,A
	MOV $05,A
	MOV $06,A
	MOV $07,A
	MOV !ARAM_SMW_MuteChannelBit,A
	MOV !ARAM_SMW_TempoIncrease,A
	MOV !ARAM_SMW_PauseMusic,A
	MOV !ARAM_SMW_PlayerOnYoshi,A
	MOV !ARAM_SMW_0389,A
	MOV A,#$20
	MOV Y,#$6C
	CALL SUB_DSPWrite
	RET
endif

CODE_09CD:
	MOV A,#$B0
	MOV Y,#$02
	DEC $90+X
	CALL CODE_1075
	MOV A,!ARAM_SMW_NoteValue+X
	MOV Y,A
	MOV A,!ARAM_SMW_Portamento+X
	MOVW $10,YA
	MOV !ARAM_SMW_CurrentChannelBit,#$00
	JMP CODE_0634

SUB_APUPort1Input:
	MOV A,$01
	CMP A,!SFX_Special

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	BNE +
	JMP CODE_099C
+:
	CMP A,#$F0
	BNE +
	JMP CODE_0B40
+:
else
	BEQ CODE_099C
endif
	CMP A,!SFX_YoshiDrumOn
	BEQ CODE_097D
	CMP A,!SFX_YoshiDrumOff
	BEQ CODE_0995
	CMP A,!SFX_Jump
	BEQ CODE_0A14
	MOV A,$05
	CMP A,!SFX_Jump
	BEQ CODE_0A03
	MOV A,$01
	CMP A,!SFX_Grinder
	BEQ CODE_0A0E
CODE_0A03:
	MOV A,$05
	CMP A,!SFX_Jump
	BEQ CODE_0A51
	CMP A,!SFX_Grinder
	BEQ CODE_0A11
CODE_0A0D:
	RET

CODE_0A0E:
	JMP CODE_0ACE

CODE_0A11:
	JMP CODE_0B08

CODE_0A14:
	MOV $05,A
	MOV A,#$04
	MOV !ARAM_SMW_JumpTimer,A
	MOV A,#$80
	MOV Y,#$5C
	CALL SUB_DSPWrite
	SET7 !ARAM_SMW_MuteChannelBit
	MOV A,#$00
	MOV Y,#$20
CODE_0A28:
	MOV $02FF+Y,A
	DBNZ Y,CODE_0A28
	RET

CODE_0A2E:
	DEC !ARAM_SMW_JumpTimer
	BNE CODE_0A0D
	MOV $1C,#$30
	BRA CODE_0A68

CODE_0A38:
	CMP $1C,#$2A
	BNE CODE_0A99
	MOV !ARAM_SMW_CurrentChannel,#$0E
	MOV X,#$0E
	MOV Y,#$00
	MOV $9F,Y
	MOV Y,#$12
	MOV $9E,Y
	MOV A,#$B9
	CALL CODE_0F5D
	BRA CODE_0A99

CODE_0A51:
	MOV A,!ARAM_SMW_JumpTimer
	BNE CODE_0A2E
	DBNZ $1C,CODE_0A38
	MOV $05,#$00
	CLR7 !ARAM_SMW_MuteChannelBit
	MOV X,#$0E
	MOV A,$CF
	BEQ CODE_0A67
	JMP CODE_0D4B

CODE_0A67:
	RET

CODE_0A68:
	CALL CODE_0AB1
	MOV A,#$B2
	MOV !ARAM_SMW_CurrentChannel,#$0E
	MOV X,#$0E
	CALL CODE_05C5
	MOV Y,#$00
	MOV $9F,Y
	MOV Y,#$05
	MOV $9E,Y
	MOV A,#$B5
	CALL CODE_0F5D
	MOV A,#$38
	MOV $10,A
	MOV Y,#$70
	CALL SUB_DSPWrite
	MOV A,#$38
	MOV $10,A
	MOV Y,#$71
	CALL SUB_DSPWrite
	MOV A,#$80
	CALL CODE_0D32
CODE_0A99:
	MOV A,#$02
	CBNE $1C,CODE_0AA5
	MOV A,#$80
	MOV Y,#$5C
	CALL SUB_DSPWrite
CODE_0AA5:
	CLR7 $13
	MOV A,$9E
	BEQ CODE_0AB0
	MOV X,#$0E
	CALL CODE_09CD
CODE_0AB0:
	RET

CODE_0AB1:
	MOV A,#$08
CODE_0AB3:
	MOV Y,#$09
	MUL YA
	MOV X,A
	MOV Y,#$70
	MOV $12,#$08
CODE_0ABC:
	MOV A,SFXInstrumentTable+X
	CALL SUB_DSPWrite
	INC X
	INC Y
	DBNZ $12,CODE_0ABC
	MOV A,SFXInstrumentTable+X
	MOV $021E,A
	RET

CODE_0ACE:
	MOV $05,A
	MOV A,#$04
	MOV !ARAM_SMW_JumpTimer,A
	MOV A,#$80
	MOV Y,#$5C
	CALL SUB_DSPWrite
	SET7 !ARAM_SMW_MuteChannelBit
	MOV A,#$00
	MOV Y,#$20
CODE_0AE2:
	MOV $02FF+Y,A
	DBNZ Y,CODE_0AE2
CODE_0AE7:
	RET

CODE_0AE8:
	DEC !ARAM_SMW_JumpTimer
	BNE CODE_0AE7
	MOV $1C,#$18
	BRA CODE_0AF7

CODE_0AF2:
	CMP $1C,#$0C
	BNE CODE_0B33
CODE_0AF7:
	MOV A,#$07
	CALL CODE_0AB3
	MOV A,#$A4
	MOV !ARAM_SMW_CurrentChannel,#$0E
	MOV X,#$0E
	CALL CODE_05C5
	BRA CODE_0B1C

CODE_0B08:
	MOV A,!ARAM_SMW_JumpTimer
	BNE CODE_0AE8
	DBNZ $1C,CODE_0AF2
	MOV $05,#$00
	CLR7 !ARAM_SMW_MuteChannelBit
	MOV X,#$0E
	MOV A,$CF
	JMP CODE_0D4B

CODE_0B1C:
	MOV A,#$28
	MOV $10,A
	MOV Y,#$70
	CALL SUB_DSPWrite
	MOV A,#$28
	MOV $10,A
	MOV Y,#$71
	CALL SUB_DSPWrite
	MOV A,#$80
	CALL CODE_0D32
CODE_0B33:
	MOV A,#$02
	CBNE $1C,CODE_0B3F
	MOV A,#$80
	MOV Y,#$5C
	CALL SUB_DSPWrite
CODE_0B3F:
	RET

CODE_0B40:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	MOV A, #$00
	MOV Y, #$2C
	CALL SUB_DSPWrite
	MOV Y, #$3C
	CALL SUB_DSPWrite
	MOV A, #$FF
	MOV Y, #$5C
	CALL SUB_DSPWrite
	MOV A, #$00
	MOV $04, A
	MOV $05, A
	MOV $06, A
	MOV $07, A
	MOV !ARAM_SMW_MuteChannelBit, A
	MOV !ARAM_SMW_TempoIncrease, A
	MOV A, #$80
	MOV !REGISTER_SPC700_ControlRegister, A
	JMP !REGISTER_SPC700_IPLROMLoc
CODE_0B74:
endif
	SETC
	CMP A,#$16
	BEQ CODE_0B55
	CMP A,#$10
	BEQ CODE_0B55
	CMP A,#$0F
	BEQ CODE_0B55
	CMP A,#$09
	BCC CODE_0B5A
	CMP A,#$0D
	BCS CODE_0B5A
CODE_0B55:
	MOV Y,#$00
	MOV !ARAM_SMW_TempoIncrease,Y
CODE_0B5A:
	MOV $06,A
	MOV $0C,#$02
	ASL A
	MOV Y,A
	MOV A,MusicPtrs-$02+Y
	MOV $40,A
	MOV A,MusicPtrs-$01+Y
	MOV $41,A
	MOV X,#$0E
CODE_0B6D:
	MOV A,#$0A
	MOV !ARAM_SMW_Pan+X,A
	MOV A,#$FF
	MOV !ARAM_SMW_Volume+X,A
	MOV A,#$00
	MOV !ARAM_SMW_Tuning+X,A
	MOV !ARAM_SMW_PanFade+X,A
	MOV !ARAM_SMW_VolumeFade+X,A
	MOV !ARAM_SMW_Vibrato+X,A
	MOV !ARAM_SMW_B1+X,A
	MOV !ARAM_SMW_RepeatCounter+X,A
	MOV !ARAM_SMW_Instrument+X,A
	DEC X
	DEC X
	BPL CODE_0B6D
	MOV !ARAM_SMW_GlobalVolume,A
	MOV !ARAM_SMW_MasterVolumeFade,A
	MOV !ARAM_SMW_TempoFade,A
	MOV !ARAM_SMW_GlobalTranspose,A
	MOV !ARAM_SMW_MasterVolume,#$C0
	MOV !ARAM_SMW_TempoHi,#$36
	MOV Y,#$20
CODE_0B9C:
	MOV $02FF+Y,A
	DBNZ Y,CODE_0B9C
	BRA CODE_0BA5

CODE_0BA3:
	MOV $06,A
CODE_0BA5:
	MOV A,!ARAM_SMW_MuteChannelBit
	EOR A,#$FF
	MOV Y,#$5C
	JMP SUB_DSPWrite

CODE_0BAE:
	MOV X,#$F0
	MOV !ARAM_SMW_GlobalVolume,X
	MOV A,#$00
	MOV $59,A
	SETC
	SBC A,!ARAM_SMW_MasterVolume
	CALL CODE_0F76
	MOVW $5A,YA
	BRA CODE_0BE7

CODE_0BC0:
	MOV A,$06
	BEQ CODE_0BDE
	CMP A,#$06
	BEQ CODE_0BCC
	AND A,#$FC
	BNE CODE_0BDC
CODE_0BCC:
	MOV A,!ARAM_SMW_PlayerOnYoshi
	BNE CODE_0BDC
	MOV A,#$20
	MOV Y,#$5C
	CALL SUB_DSPWrite
	SET5 !ARAM_SMW_MuteChannelBit
	BRA CODE_0BDE

CODE_0BDC:
	CLR5 !ARAM_SMW_MuteChannelBit
CODE_0BDE:
	MOV A,$02
	BMI CODE_0BAE
	BEQ CODE_0BE7
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	JMP CODE_0B74
else
	JMP CODE_0B40
endif

CODE_0BE7:
	MOV A,$0C
	BNE CODE_0BFE
	MOV A,$06
	BNE CODE_0C46
CODE_0BEF:
	RET

CODE_0BF0:
	MOV Y,#$00
	MOV A,($40)+Y
	INCW $40
	PUSH A
	MOV A,($40)+Y
	INCW $40
	MOV Y,A
	POP A
	RET

CODE_0BFE:
	DBNZ $0C,CODE_0BEF
CODE_0C01:
	CALL CODE_0BF0
	MOVW !ARAM_SMW_NotePitchLo,YA
	MOV A,Y
	BNE CODE_0C22
	MOV A,!ARAM_SMW_NotePitchLo
	BEQ CODE_0BA3
	DEC $42
	BEQ CODE_0C1C
	BPL CODE_0C15
	MOV $42,A
CODE_0C15:
	CALL CODE_0BF0
	MOVW $40,YA
	BRA CODE_0C01

CODE_0C1C:
	INCW $40
	INCW $40
	BRA CODE_0C01

CODE_0C22:
	MOV Y,#$0F
CODE_0C24:
	MOV A,(!ARAM_SMW_NotePitchLo)+Y
	MOV $0030+Y,A
	DEC Y
	BPL CODE_0C24
	MOV X,#$0E
	MOV !ARAM_SMW_CurrentChannelBit,#$80
CODE_0C31:
	MOV A,$31+X
	BEQ CODE_0C40
	MOV A,#$01
	MOV $70+X,A
	MOV A,!ARAM_SMW_Instrument+X
	BNE CODE_0C40
	CALL CODE_0D4A
CODE_0C40:
	LSR !ARAM_SMW_CurrentChannelBit
	DEC X
	DEC X
	BPL CODE_0C31
CODE_0C46:
	MOV X,#$00
	MOV $47,X
	MOV !ARAM_SMW_CurrentChannelBit,#$01
CODE_0C4D:
	MOV !ARAM_SMW_CurrentChannel,X
	MOV A,$31+X
	BEQ CODE_0CC9
	DEC $70+X
	BNE CODE_0CC6
CODE_0C57:
	CALL CODE_125E
	BNE CODE_0C7A
	MOV A,!ARAM_SMW_RepeatCounter+X
	BEQ CODE_0C01
	DEC !ARAM_SMW_RepeatCounter+X
	BNE CODE_0C6E
	MOV A,$03E0+X
	MOV $30+X,A
	MOV A,$03E1+X
	BRA CODE_0C76

CODE_0C6E:
	MOV A,$03F0+X
	MOV $30+X,A
	MOV A,$03F1+X
CODE_0C76:
	MOV $31+X,A
	BRA CODE_0C57

CODE_0C7A:
	BMI CODE_0C9F
	MOV $0200+X,A
	CALL CODE_125E
	BMI CODE_0C9F
	PUSH A
	XCN A
	AND A,#$07
	MOV Y,A
	MOV A,DATA_NoteDurations+Y
	MOV $0201+X,A
	POP A
	AND A,#$0F
	MOV Y,A
	MOV A,DATA_VelocityValues+Y
	MOV !ARAM_SMW_qVolume+X,A
	OR (!ARAM_SMW_UpdateVolume),(!ARAM_SMW_CurrentChannelBit)
	CALL CODE_125E
CODE_0C9F:
	CMP A,#$DA
	BCC CODE_0CA8
	CALL CODE_0D40
	BRA CODE_0C57

CODE_0CA8:
	PUSH A
	MOV A,!ARAM_SMW_CurrentChannelBit
	AND A,!ARAM_SMW_MuteChannelBit
	POP A
	BNE CODE_0CB3
	CALL CODE_05C5
CODE_0CB3:
	MOV A,$0200+X
	MOV $70+X,A
	MOV Y,A
	MOV A,$0201+X
	MUL YA
	MOV A,Y
	BNE CODE_0CC1
	INC A
CODE_0CC1:
	MOV $0100+X,A
	BRA CODE_0CC9

CODE_0CC6:
	CALL CODE_10A1
CODE_0CC9:
	INC X
	INC X
	ASL !ARAM_SMW_CurrentChannelBit
	BCS CODE_0CD2
	JMP CODE_0C4D

CODE_0CD2:
	MOV A,!ARAM_SMW_TempoFade
	BEQ CODE_0CE3
	DBNZ !ARAM_SMW_TempoFade,CODE_0CDD
	MOVW YA,!ARAM_SMW_TempoFade
	BRA CODE_0CE1

CODE_0CDD:
	MOVW YA,!ARAM_SMW_TempoAfterFadeLo
	ADDW YA,!ARAM_SMW_TempoLo
CODE_0CE1:
	MOVW !ARAM_SMW_TempoLo,YA
CODE_0CE3:
	MOV A,!ARAM_SMW_MasterVolumeFade
	BEQ CODE_0D03
	DBNZ !ARAM_SMW_MasterVolumeFade,CODE_0CF4
	MOV A,#$00
	MOV Y,$62
	MOVW $61,YA
	MOV Y,$64
	BRA CODE_0CFE

CODE_0CF4:
	MOVW YA,$65
	ADDW YA,$61
	MOVW $61,YA
	MOVW YA,$67
	ADDW YA,$63
CODE_0CFE:
	MOVW $63,YA
	CALL CODE_0EEB
CODE_0D03:
	MOV A,!ARAM_SMW_GlobalVolume
	BEQ CODE_0D17
	DBNZ !ARAM_SMW_GlobalVolume,CODE_0D0E
	MOVW YA,!ARAM_SMW_GlobalVolume
	BRA CODE_0D12

CODE_0D0E:
	MOVW YA,$5A
	ADDW YA,$56
CODE_0D12:
	MOVW $56,YA
	MOV !ARAM_SMW_UpdateVolume,#$FF
CODE_0D17:
	MOV X,#$0E
	MOV !ARAM_SMW_CurrentChannelBit,#$80
CODE_0D1C:
	MOV A,$31+X
	BEQ CODE_0D23
	CALL CODE_0FDB
CODE_0D23:
	LSR !ARAM_SMW_CurrentChannelBit
	DEC X
	DEC X
	BPL CODE_0D1C
	MOV !ARAM_SMW_UpdateVolume,#$00
	MOV A,!ARAM_SMW_MuteChannelBit
	EOR A,#$FF
	AND A,$47
CODE_0D32:
	PUSH A
	MOV Y,#$5C
	MOV A,#$00
	CALL SUB_DSPWrite
	POP A
	MOV Y,#$4C
	JMP SUB_DSPWrite

CODE_0D40:
	ASL A
	MOV X,A
	MOV A,#$00
	JMP (CommandDispatchTable-$B4+X)

VCMD_SetInstrument:
	CALL CODE_125C
CODE_0D4A:
	INC A
CODE_0D4B:
	MOV !ARAM_SMW_Instrument+X,A
	DEC A
	MOV Y,#$05
	MOV !ARAM_SMW_UploadDestinationLo,#InstrumentTable
	MOV !ARAM_SMW_UploadDestinationHi,#InstrumentTable>>8
CODE_0D56:
	MUL YA
	ADDW YA,!ARAM_SMW_UploadDestinationLo
	MOVW !ARAM_SMW_UploadDestinationLo,YA
	MOV A,!ARAM_SMW_CurrentChannelBit
	AND A,!ARAM_SMW_MuteChannelBit
	BNE CODE_0D8D
	PUSH X
	MOV A,X
	XCN A
	LSR A
	OR A,#$04
	MOV X,A
	MOV A,!ARAM_SMW_CurrentChannelBit
	EOR A,#$FF
	AND A,$2F
	MOV $2F,A
	MOV Y,#$3D
	CALL SUB_DSPWrite
	MOV Y,#$00
CODE_0D77:
	MOV A,(!ARAM_SMW_UploadDestinationLo)+Y
	MOV !REGISTER_SPC700_DSPRegisterIndex,X
	MOV !REGISTER_SPC700_ReadWriteToDSPRegister,A
	INC X
	INC Y
	CMP Y,#$04
	BNE CODE_0D77
	MOV A,(!ARAM_SMW_UploadDestinationLo)+Y
	POP X
	MOV $0210+X,A
	MOV A,#$00
CODE_0D8D:
	RET

VCMD_SetPan:
	CALL CODE_125C
	AND A,#$1F
	MOV !ARAM_SMW_Pan+X,A
	MOV A,Y
	AND A,#$C0
	MOV !ARAM_SMW_SurroundSound+X,A
	MOV A,#$00
	MOV $0280+X,A
	OR (!ARAM_SMW_UpdateVolume),(!ARAM_SMW_CurrentChannelBit)
	RET

VCMD_PanFade:
	CALL CODE_125C
	MOV !ARAM_SMW_PanFade+X,A
	PUSH A
	CALL CODE_125E
	MOV !ARAM_SMW_PanFadeDestination+X,A
	SETC
	SBC A,!ARAM_SMW_Pan+X
	POP X
	CALL CODE_0F76
	MOV $0290+X,A
	MOV A,Y
	MOV $0291+X,A
	RET

VCMD_VibratoOn:
	CALL CODE_125C
	MOV $0340+X,A
	MOV A,#$00
	MOV $0341+X,A
	CALL CODE_125E
	MOV $0331+X,A
	CALL CODE_125E
VCMD_VibratoOff:
	MOV X,!ARAM_SMW_CurrentChannel
	MOV !ARAM_SMW_Vibrato+X,A
	RET

VCMD_VibratoFade:
	CALL CODE_125C
	MOV $0341+X,A
	PUSH A
	MOV A,!ARAM_SMW_Vibrato+X
	MOV $0351+X,A
	POP X
	MOV Y,#$00
	DIV YA,X
	MOV X,!ARAM_SMW_CurrentChannel
	MOV $0350+X,A
	RET

VCMD_MasterVolume:
	CALL CODE_125C
	MOV !ARAM_SMW_MasterVolume,A
	MOV $56,#$00
	MOV !ARAM_SMW_UpdateVolume,#$FF
	RET

VCMD_MasterVolumeFade:
	CALL CODE_125C
	MOV !ARAM_SMW_GlobalVolume,A
	CALL CODE_125E
	MOV $59,A
	MOV X,!ARAM_SMW_GlobalVolume
	SETC
	SBC A,!ARAM_SMW_MasterVolume
	CALL CODE_0F76
	MOVW $5A,YA
	RET

VCMD_Tempo:
	CALL CODE_125C
CODE_0E14:
	ADC A,!ARAM_SMW_TempoIncrease
	MOV !ARAM_SMW_TempoHi,A
	MOV !ARAM_SMW_TempoLo,#$00
	RET

VCMD_TempoFade:
	CALL CODE_125C
	MOV !ARAM_SMW_TempoFade,A
	CALL CODE_125E
	ADC A,!ARAM_SMW_TempoIncrease
	MOV !ARAM_SMW_TempoAfterFadeHi,A
	MOV X,!ARAM_SMW_TempoFade
	SETC
	SBC A,!ARAM_SMW_TempoHi
	CALL CODE_0F76
	MOVW !ARAM_SMW_TempoAfterFadeLo,YA
	RET

VCMD_GlobalTranspose:
	CALL CODE_125C
	MOV !ARAM_SMW_GlobalTranspose,A
	RET

VCMD_TremoloOn:
	CALL CODE_125C
	MOV $0370+X,A
	CALL CODE_125E
	MOV $0362+X,A
	CALL CODE_125E
VCMD_TremoloOff:
	MOV X,!ARAM_SMW_CurrentChannel
	MOV !ARAM_SMW_B1+X,A
	RET

VCMD_PitchEnvelopeRelease:
	MOV A,#$01
	BRA CODE_0E55

VCMD_PitchEnvelopeAttack:
	MOV A,#$00
CODE_0E55:
	MOV X,!ARAM_SMW_CurrentChannel
	MOV $0320+X,A
	CALL CODE_125C
	MOV $0301+X,A
	CALL CODE_125E
	MOV $0300+X,A
	CALL CODE_125E
	MOV $0321+X,A
	RET

CODE_0E6D: ;Unused?
	MOV X,!ARAM_SMW_CurrentChannel
	MOV $0300+X,A
	RET

VCMD_VoiceVolume:
	CALL CODE_125C
	MOV !ARAM_SMW_Volume+X,A
	MOV A,#$00
	MOV $0240+X,A
	OR (!ARAM_SMW_UpdateVolume),(!ARAM_SMW_CurrentChannelBit)
	RET

VCMD_VoiceVolumeFade:
	CALL CODE_125C
	MOV !ARAM_SMW_VolumeFade+X,A
	PUSH A
	CALL CODE_125E
	MOV $0260+X,A
	SETC
	SBC A,!ARAM_SMW_Volume+X
	POP X
	CALL CODE_0F76
	MOV $0250+X,A
	MOV A,Y
	MOV $0251+X,A
	RET

VCMD_Tuning:
	CALL CODE_125C
	MOV !ARAM_SMW_Tuning+X,A
	RET

VCMD_CallSubroutine:
	CALL CODE_125C
	PUSH A
	CALL CODE_125E
	PUSH A
	CALL CODE_125E
	MOV !ARAM_SMW_RepeatCounter+X,A
	MOV A,$30+X
	MOV $03E0+X,A
	MOV A,$31+X
	MOV $03E1+X,A
	POP A
	MOV $31+X,A
	MOV $03F1+X,A
	POP A
	MOV $30+X,A
	MOV $03F0+X,A
	RET

VCMD_SetEchoVolume:
	CALL CODE_125C
	MOV !ARAM_SMW_0389,A
	MOV Y,#$4D
	CALL SUB_DSPWrite
	CALL CODE_125E
	MOV A,#$00
	MOVW $61,YA
	CALL CODE_125E
	MOV A,#$00
	MOVW $63,YA
	MOV $2E,A
	AND A,#$1F
	MOV Y,#$6C
	CALL SUB_DSPWrite
CODE_0EEB:
	MOV A,$62
	MOV Y,#$2C
	CALL SUB_DSPWrite
	MOV A,$64
	MOV Y,#$3C
	JMP SUB_DSPWrite

VCMD_EchoVolumeFade:
	CALL CODE_125C
	MOV !ARAM_SMW_MasterVolumeFade,A
	CALL CODE_125E
	MOV $69,A
	MOV X,!ARAM_SMW_MasterVolumeFade
	SETC
	SBC A,$62
	CALL CODE_0F76
	MOVW $65,YA
	CALL CODE_125E
	MOV $6A,A
	MOV X,!ARAM_SMW_MasterVolumeFade
	SETC
	SBC A,$64
	CALL CODE_0F76
	MOVW $67,YA
	RET

VCMD_DisableEcho:
	MOV X,!ARAM_SMW_CurrentChannel
	MOV !ARAM_SMW_0389,A
CODE_0F22:
	MOV Y,A
	MOVW $61,YA
	MOVW $63,YA
	CALL CODE_0EEB
	MOV $2E,A
	OR A,#$20
	MOV Y,#$6C
	JMP SUB_DSPWrite

VCMD_SetEchoProperties:
	CALL CODE_125C
	MOV Y,#$7D
	CALL SUB_DSPWrite
	CALL CODE_125E
	MOV Y,#$0D
	CALL SUB_DSPWrite
	CALL CODE_125E
	MOV Y,#$08
	MUL YA
	MOV X,A
	MOV Y,#$0F
CODE_0F4C:
	MOV A,DATA_EchoFilters+X
	CALL SUB_DSPWrite
	INC X
	MOV A,Y
	CLRC
	ADC A,#$10
	MOV Y,A
	BPL CODE_0F4C
	MOV X,!ARAM_SMW_CurrentChannel
	RET

CODE_0F5D:
	AND A,#$7F
	MOV $02D0+X,A
	SETC
	SBC A,!ARAM_SMW_NoteValue+X
	PUSH A
	MOV A,$90+X
	MOV X,A
	POP A
	CALL CODE_0F76
	MOV $02C0+X,A
	MOV A,Y
	MOV $02C1+X,A
	RET

CODE_0F76:
	BCS CODE_0F85
	EOR A,#$FF
	INC A
	CALL CODE_0F85
	MOVW !ARAM_SMW_UploadDestinationLo,YA
	MOVW YA,!ARAM_SMW_FineVibratoValue
	SUBW YA,!ARAM_SMW_UploadDestinationLo
	RET

CODE_0F85:
	MOV Y,#$00
	DIV YA,X
	PUSH A
	MOV A,#$00
	DIV YA,X
	POP Y
	MOV X,!ARAM_SMW_CurrentChannel
	RET

CommandDispatchTable:
	dw VCMD_SetInstrument
	dw VCMD_SetPan
	dw VCMD_PanFade
	dw $0000
	dw VCMD_VibratoOn
	dw VCMD_VibratoOff
	dw VCMD_MasterVolume
	dw VCMD_MasterVolumeFade
	dw VCMD_Tempo
	dw VCMD_TempoFade
	dw VCMD_GlobalTranspose
	dw VCMD_TremoloOn
	dw VCMD_TremoloOff
	dw VCMD_VoiceVolume
	dw VCMD_VoiceVolumeFade
	dw VCMD_CallSubroutine
	dw VCMD_VibratoFade
	dw VCMD_PitchEnvelopeRelease
	dw VCMD_PitchEnvelopeAttack
	dw $0000
	dw VCMD_Tuning
	dw VCMD_SetEchoVolume
	dw VCMD_DisableEcho
	dw VCMD_SetEchoProperties
	dw VCMD_EchoVolumeFade

CommandLengthTable:
	db $02,$02,$03,$04,$04,$01
	db $02,$03,$02,$03,$02,$04,$01,$02
	db $03,$04,$02,$04,$04,$01,$02,$04
	db $01,$04,$04

CODE_0FDB:
	MOV A,!ARAM_SMW_VolumeFade+X
	BEQ CODE_0FEB
	OR (!ARAM_SMW_UpdateVolume),(!ARAM_SMW_CurrentChannelBit)
	MOV A,#$40
	MOV Y,#$02
	DEC !ARAM_SMW_VolumeFade+X
	CALL CODE_1075
CODE_0FEB:
	MOV A,!ARAM_SMW_B1+X
	MOV Y,A
	BEQ CODE_1013
	MOV A,$0370+X
	CBNE $B0+X,CODE_1011
	OR (!ARAM_SMW_UpdateVolume),(!ARAM_SMW_CurrentChannelBit)
	MOV A,$0360+X
	BPL CODE_1005
	INC Y
	BNE CODE_1005
	MOV A,#$80
	BRA CODE_1009

CODE_1005:
	CLRC
	ADC A,$0362+X
CODE_1009:
	MOV $0360+X,A
	CALL CODE_123A
	BRA CODE_1019

CODE_1011:
	INC $B0+X
CODE_1013:
	MOV A,!ARAM_SMW_qVolume+X
	CALL CODE_124D
CODE_1019:
	MOV A,!ARAM_SMW_PanFade+X
	BNE CODE_1024
	MOV A,!ARAM_SMW_CurrentChannelBit
	AND A,!ARAM_SMW_UpdateVolume
	BNE CODE_102D
	RET

CODE_1024:
	MOV A,#$80
	MOV Y,#$02
	DEC !ARAM_SMW_PanFade+X
	CALL CODE_1075
CODE_102D:
	MOV A,!ARAM_SMW_Pan+X
	MOV Y,A
	MOV A,$0280+X
	MOVW $10,YA
CODE_1036:
	MOV A,X
	XCN A
	LSR A
	MOV $12,A
CODE_103B:
	MOV Y,$11
	MOV A,DATA_PanValues+1+Y
	SETC
	SBC A,DATA_PanValues+Y
	MOV Y,$10
	MUL YA
	MOV A,Y
	MOV Y,$11
	CLRC
	ADC A,DATA_PanValues+Y
	MOV Y,A
	MOV A,$0371+X
	MUL YA
	MOV A,!ARAM_SMW_SurroundSound+X
	BBC0 $12,CODE_105A
	ASL A
CODE_105A:
	BPL CODE_1061
	MOV A,Y
	EOR A,#$FF
	INC A
	MOV Y,A
CODE_1061:
	MOV A,Y
	MOV Y,$12
	CALL CODE_068F
	MOV A,#$00
	MOV Y,#$14
	SUBW YA,$10
	MOVW $10,YA
	INC $12
	BBC1 $12,CODE_103B
	RET

CODE_1075:
	MOVW !ARAM_SMW_UploadDestinationLo,YA
	BNE CODE_1088
	CLRC
	ADC A,#$20
	MOVW !ARAM_SMW_NotePitchLo,YA
	MOV A,X
	MOV Y,A
	MOV A,#$00
	PUSH A
	MOV A,(!ARAM_SMW_NotePitchLo)+Y
	INC Y
	BRA CODE_109A

CODE_1088:
	CLRC
	ADC A,#$10
	MOVW !ARAM_SMW_NotePitchLo,YA
	MOV A,X
	MOV Y,A
	MOV A,(!ARAM_SMW_UploadDestinationLo)+Y
	CLRC
	ADC A,(!ARAM_SMW_NotePitchLo)+Y
	PUSH A
	INC Y
	MOV A,(!ARAM_SMW_UploadDestinationLo)+Y
	ADC A,(!ARAM_SMW_NotePitchLo)+Y
CODE_109A:
	MOV (!ARAM_SMW_UploadDestinationLo)+Y,A
	DEC Y
	POP A
	MOV (!ARAM_SMW_UploadDestinationLo)+Y,A
	RET

CODE_10A1:
	SETP
	DEC $00+X
	CLRP
	BEQ CODE_10AC
	MOV A,#$02
	CBNE $70+X,CODE_10D8
CODE_10AC:
	MOV A,$30+X
	MOV Y,$31+X
	MOVW !ARAM_SMW_UploadDestinationLo,YA
	MOV Y,#$00
CODE_10B4:
	MOV A,(!ARAM_SMW_UploadDestinationLo)+Y
	BEQ CODE_10D1
	BMI CODE_10BF
CODE_10BA:
	INC Y
	MOV A,(!ARAM_SMW_UploadDestinationLo)+Y
	BPL CODE_10BA
CODE_10BF:
	CMP A,#$C6
	BEQ CODE_10D8
	CMP A,#$DA
	BCC CODE_10D1
	PUSH Y
	MOV Y,A
	POP A
	CLRC
	ADC A,CommandLengthTable-$DA+Y
	MOV Y,A
	BRA CODE_10B4

CODE_10D1:
	MOV A,!ARAM_SMW_CurrentChannelBit
	MOV Y,#$5C
	CALL CODE_068F
CODE_10D8:
	CLR7 $13
	MOV A,$90+X
	BEQ CODE_10E4
	MOV A,!ARAM_SMW_CurrentChannelBit
	AND A,!ARAM_SMW_MuteChannelBit
	BEQ CODE_1111
CODE_10E4:
	MOV A,($30+X)
	CMP A,#$DD
	BNE CODE_112A
	MOV A,!ARAM_SMW_CurrentChannelBit
	AND A,!ARAM_SMW_MuteChannelBit
	BEQ CODE_10FB
	MOV $10,#$04
CODE_10F3:
	CALL CODE_1260
	DBNZ $10,CODE_10F3
	BRA CODE_1111

CODE_10FB:
	CALL CODE_1260
	CALL CODE_125E
	MOV $91+X,A
	CALL CODE_125E
	MOV $90+X,A
	CALL CODE_125E
	CLRC
	ADC A,!ARAM_SMW_GlobalTranspose
	CALL CODE_0F5D
CODE_1111:
	MOV A,$91+X
	BEQ CODE_1119
	DEC $91+X
	BRA CODE_112A

CODE_1119:
	MOV A,!ARAM_SMW_MuteChannelBit
	AND A,!ARAM_SMW_CurrentChannelBit
	BNE CODE_112A
	SET7 $13
	MOV A,#$B0
	MOV Y,#$02
	DEC $90+X
	CALL CODE_1075
CODE_112A:
	MOV A,!ARAM_SMW_NoteValue+X
	MOV Y,A
	MOV A,!ARAM_SMW_Portamento+X
	MOVW $10,YA
	MOV A,!ARAM_SMW_Vibrato+X
	BEQ CODE_1140
	MOV A,$0340+X
	CMP A,$A0+X
	BEQ CODE_1144
	INC $A0+X
CODE_1140:
	BBS7 $13,CODE_1195
	RET

CODE_1144:
	MOV A,$0341+X
	BEQ CODE_1166
	CMP A,$0110+X
	BNE CODE_1155
	MOV A,$0351+X
	MOV !ARAM_SMW_Vibrato+X,A
	BRA CODE_1166

CODE_1155:
	MOV A,$0110+X
	BEQ CODE_115C
	MOV A,!ARAM_SMW_Vibrato+X
CODE_115C:
	CLRC
	ADC A,$0350+X
	MOV !ARAM_SMW_Vibrato+X,A
	SETP
	INC $10+X
	CLRP
CODE_1166:
	MOV A,$0330+X
	CLRC
	ADC A,$0331+X
	MOV $0330+X,A
CODE_1170:
	MOV $12,A
	ASL A
	ASL A
	BCC CODE_1178
	EOR A,#$FF
CODE_1178:
	MOV Y,A
	MOV A,!ARAM_SMW_Vibrato+X
	CMP A,#$F1
	BCS CODE_1185
	MUL YA
	MOV A,Y
	MOV Y,#$00
	BRA CODE_1188

CODE_1185:
	AND A,#$0F
	MUL YA
CODE_1188:
	BBC7 $12,CODE_1191
	MOVW $12,YA
	MOVW YA,!ARAM_SMW_FineVibratoValue
	SUBW YA,$12
CODE_1191:
	ADDW YA,$10
	MOVW $10,YA
CODE_1195:
	JMP CODE_0634

CODE_1198:
	CLR7 $13
	MOV A,!ARAM_SMW_B1+X
	BEQ CODE_11A7
	MOV A,$0370+X
	CBNE $B0+X,CODE_11A7
	CALL CODE_122D
CODE_11A7:
	MOV A,!ARAM_SMW_Pan+X
	MOV Y,A
	MOV A,$0280+X
	MOVW $10,YA
	MOV A,!ARAM_SMW_PanFade+X
	BNE CODE_11B9
	BBS7 $13,CODE_11C3
	BRA CODE_11C6

CODE_11B9:
	MOV A,$0291+X
	MOV Y,A
	MOV A,$0290+X
	CALL CODE_1201
CODE_11C3:
	CALL CODE_1036
CODE_11C6:
	CLR7 $13
	MOV A,!ARAM_SMW_NoteValue+X
	MOV Y,A
	MOV A,!ARAM_SMW_Portamento+X
	MOVW $10,YA
	MOV A,$90+X
	BEQ CODE_11E3
	MOV A,$91+X
	BNE CODE_11E3
	MOV A,$02C1+X
	MOV Y,A
	MOV A,$02C0+X
	CALL CODE_11FF
CODE_11E3:
	MOV A,!ARAM_SMW_Vibrato+X
	BNE CODE_11EB
CODE_11E7:
	BBS7 $13,CODE_1195
	RET

CODE_11EB:
	MOV A,$0340+X
	CBNE $A0+X,CODE_11E7
	MOV Y,!ARAM_SMW_TempoAdder
	MOV A,$0331+X
	MUL YA
	MOV A,Y
	CLRC
	ADC A,$0330+X
	JMP CODE_1170

CODE_11FF:
	SET7 $13
CODE_1201:
	MOVW !ARAM_SMW_NotePitchLo,YA
	MOV $12,Y
	BBC7 $12,CODE_120E
	MOVW YA,!ARAM_SMW_FineVibratoValue
	SUBW YA,!ARAM_SMW_NotePitchLo
	MOVW !ARAM_SMW_NotePitchLo,YA
CODE_120E:
	MOV Y,!ARAM_SMW_TempoAdder
	MOV A,!ARAM_SMW_NotePitchLo
	MUL YA
	MOV !ARAM_SMW_UploadDestinationLo,Y
	MOV !ARAM_SMW_UploadDestinationHi,#$00
	MOV Y,!ARAM_SMW_TempoAdder
	MOV A,!ARAM_SMW_NotePitchHi
	MUL YA
	ADDW YA,!ARAM_SMW_UploadDestinationLo
	BBC7 $12,CODE_1228
	MOVW !ARAM_SMW_UploadDestinationLo,YA
	MOVW YA,!ARAM_SMW_FineVibratoValue
	SUBW YA,!ARAM_SMW_UploadDestinationLo
CODE_1228:
	ADDW YA,$10
	MOVW $10,YA
	RET

CODE_122D:
	SET7 $13
	MOV Y,!ARAM_SMW_TempoAdder
	MOV A,$0362+X
	MUL YA
	MOV A,Y
	CLRC
	ADC A,$0360+X
CODE_123A:
	ASL A
	BCC CODE_123F
	EOR A,#$FF
CODE_123F:
	MOV Y,!ARAM_SMW_B1+X
	MUL YA
	MOV A,!ARAM_SMW_qVolume+X
	MUL YA
	MOV A,Y
	EOR A,#$FF
	SETC
	ADC A,!ARAM_SMW_qVolume+X
CODE_124D:
	MOV Y,A
	MOV A,!ARAM_SMW_Volume+X
	MUL YA
	MOV A,!ARAM_SMW_MasterVolume
	MUL YA
	MOV A,Y
	MUL YA
	MOV A,Y
	MOV $0371+X,A
	RET

CODE_125C:
	MOV X,!ARAM_SMW_CurrentChannel
CODE_125E:
	MOV A,($30+X)
CODE_1260:
	INC $30+X
	BNE CODE_1266
	INC $31+X
CODE_1266:
	MOV Y,A
	RET

DATA_NoteDurations:
	db $33,$66,$80,$99,$B3,$CC,$E6,$FF

DATA_VelocityValues:
	db $08,$12,$1B,$24,$2C,$35,$3E,$47,$51,$5A,$62,$6B,$7D,$8F,$A1,$B3

DATA_PanValues:
	db $00,$01,$03,$07,$0D,$15,$1E,$29,$34,$42,$51,$5E,$67,$6E,$73,$77
	db $7A,$7C,$7D,$7E,$7F

DATA_DefDSPValues:
	db $7F,$7F,$00,$00,$2F,$60,$00,$00,$00,$80,$60,$02

DATA_DefDSPRegs:
	db $0C,$1C,$2C,$3C,$6C,$0D,$2D,$3D,$4D,$5D,$6D,$7D

DATA_EchoFilters:
	db $FF,$08,$17,$24,$24,$17,$08,$FF
	db $7F,$00,$00,$00,$00,$00,$00,$00

CODE_12BD:
	MOV Y,#$00
	ASL A
	MOV X,#$18
	DIV YA,X
	MOV X,A
	MOV A,PitchTable+1+Y
	MOV !ARAM_SMW_NotePitchLo,A
	MOV A,PitchTable+Y
	BRA CODE_12D2

CODE_12CE:
	LSR !ARAM_SMW_NotePitchLo
	ROR A
	INC X
CODE_12D2:
	CMP X,#$06
	BNE CODE_12CE
	MOV Y,!ARAM_SMW_NotePitchLo
	RET

PitchTable:
	dw $10BE
	dw $11BD
	dw $12CB
	dw $13E9
	dw $1518
	dw $1659
	dw $17AD
	dw $1916
	dw $1A94
	dw $1C28
	dw $1DD5
	dw $1F9B
	db $00

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	%SPCDataBlockEnd(!ARAM_SMW_EngineLoc)

	%SPCDataBlockStart(FE00)
endif

CODE_12F2:
	MOV A,#$AA
	MOV !REGISTER_SPC700_APUPort0,A
	MOV A,#$BB
	MOV !REGISTER_SPC700_APUPort1,A
CODE_12FC:
	MOV A,!REGISTER_SPC700_APUPort0
	CMP A,#$CC
	BNE CODE_12FC
	BRA CODE_1325

CODE_1305:
	MOV Y,!REGISTER_SPC700_APUPort0
	BNE CODE_1305
CODE_130A:
	CMP Y,!REGISTER_SPC700_APUPort0
	BNE CODE_131E
	MOV A,!REGISTER_SPC700_APUPort1
	MOV !REGISTER_SPC700_APUPort0,Y
	MOV (!ARAM_SMW_UploadDestinationLo)+Y,A
	INC Y
	BNE CODE_130A
	INC !ARAM_SMW_UploadDestinationHi
	BRA CODE_130A

CODE_131E:
	BPL CODE_130A
	CMP Y,!REGISTER_SPC700_APUPort0
	BPL CODE_130A
CODE_1325:
	MOV A,!REGISTER_SPC700_APUPort2
	MOV Y,!REGISTER_SPC700_APUPort3
	MOVW !ARAM_SMW_UploadDestinationLo,YA
	MOV Y,!REGISTER_SPC700_APUPort0
	MOV A,!REGISTER_SPC700_APUPort1
	MOV !REGISTER_SPC700_APUPort0,Y
	BNE CODE_1305
	MOV X,#$31
	MOV !REGISTER_SPC700_ControlRegister,X
	RET

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	%SPCDataBlockEnd(FE00)
else
	%SPCDataBlockEnd(!ARAM_SMW_EngineLoc)
endif

incsrc "sfx.asm"

base $!ARAM_SMW_SampleBankPtrTableLoc
SamplePtrs:

base $!ARAM_SMW_MusicBankLoc
MusicPtrs: